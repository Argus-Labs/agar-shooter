// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: shard/v1/shard.proto

package shardv1grpc

import (
	v1 "buf.build/gen/go/argus-labs/world-engine/protocolbuffers/go/shard/v1"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShardHandler_SubmitShardBatch_FullMethodName = "/world.engine.shard.v1.ShardHandler/SubmitShardBatch"
)

// ShardHandlerClient is the client API for ShardHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShardHandlerClient interface {
	SubmitShardBatch(ctx context.Context, in *v1.SubmitShardBatchRequest, opts ...grpc.CallOption) (*v1.SubmitShardBatchResponse, error)
}

type shardHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewShardHandlerClient(cc grpc.ClientConnInterface) ShardHandlerClient {
	return &shardHandlerClient{cc}
}

func (c *shardHandlerClient) SubmitShardBatch(ctx context.Context, in *v1.SubmitShardBatchRequest, opts ...grpc.CallOption) (*v1.SubmitShardBatchResponse, error) {
	out := new(v1.SubmitShardBatchResponse)
	err := c.cc.Invoke(ctx, ShardHandler_SubmitShardBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardHandlerServer is the server API for ShardHandler service.
// All implementations should embed UnimplementedShardHandlerServer
// for forward compatibility
type ShardHandlerServer interface {
	SubmitShardBatch(context.Context, *v1.SubmitShardBatchRequest) (*v1.SubmitShardBatchResponse, error)
}

// UnimplementedShardHandlerServer should be embedded to have forward compatible implementations.
type UnimplementedShardHandlerServer struct {
}

func (UnimplementedShardHandlerServer) SubmitShardBatch(context.Context, *v1.SubmitShardBatchRequest) (*v1.SubmitShardBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitShardBatch not implemented")
}

// UnsafeShardHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShardHandlerServer will
// result in compilation errors.
type UnsafeShardHandlerServer interface {
	mustEmbedUnimplementedShardHandlerServer()
}

func RegisterShardHandlerServer(s grpc.ServiceRegistrar, srv ShardHandlerServer) {
	s.RegisterService(&ShardHandler_ServiceDesc, srv)
}

func _ShardHandler_SubmitShardBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.SubmitShardBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardHandlerServer).SubmitShardBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardHandler_SubmitShardBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardHandlerServer).SubmitShardBatch(ctx, req.(*v1.SubmitShardBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShardHandler_ServiceDesc is the grpc.ServiceDesc for ShardHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShardHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "world.engine.shard.v1.ShardHandler",
	HandlerType: (*ShardHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitShardBatch",
			Handler:    _ShardHandler_SubmitShardBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shard/v1/shard.proto",
}
